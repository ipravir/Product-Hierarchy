<?xml version="1.0" encoding="utf-8"?>
<nugget name="PROHIERARCHY">
 <PROG NAME="ZMAT_HEIRARCHY" VARCL="X" SUBC="1" RSTAT="K" RMAND="800" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Product Heirarchy" LENGTH="18 "/>
   </language>
  </textPool>
  <dynpros>
   <dynpro PROG="ZMAT_HEIRARCHY" DNUM="9000" FNUM="9000" BZMX="0 " BZBR="0 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="27 " NOCO="122 " VALP="0 " CUAN="G" SPRA="E" DTEXT="Material Heirarchy">
    <dynprofield FNAM="ZCL_MAT_HEIRARCHY=&gt;GV_UCOMM" DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE status_9000.
*
PROCESS AFTER INPUT.
  MODULE user_command_9000.</dynproflowsource>
   </dynpro>
  </dynpros>
  <pfstatus>
   <pfstatus_sta CODE="MENU" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="Menu"/>
   <pfstatus_fun CODE="BACK" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Back"/>
   <pfstatus_fun CODE="BACK" TEXTNO="002" TEXT_TYPE="S" FUN_TEXT="Exit"/>
   <pfstatus_fun CODE="BACK" TEXTNO="003" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="Cancel"/>
   <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="BACK" FUNNO="003"/>
   <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="BACK" FUNNO="002"/>
   <pfstatus_set STATUS="MENU" FUNCTION="BACK"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="Menu"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" INT_NOTE="Menu"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="D" INT_NOTE="Menu"/>
   <pfstatus_tit CODE="TITLE" TEXT="Product Heirarchy"/>
  </pfstatus>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report ZMAT_HEIRARCHY
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;---------------------------------------------------------------------*
REPORT zmat_heirarchy.

DATA go_heir TYPE REF TO zcl_mat_heirarchy.

INITIALIZATION.
  IF go_heir IS NOT BOUND.
    go_heir = NEW zcl_mat_heirarchy( ).
  ENDIF.

START-OF-SELECTION.



  CALL SCREEN 9000.

*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_9000  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9000 OUTPUT.
  SET PF-STATUS &apos;MENU&apos;.
  SET TITLEBAR &apos;TITLE&apos;.
  go_heir-&gt;pbo( ).
ENDMODULE.
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_9000  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9000 INPUT.
  go_heir-&gt;pai( ).
ENDMODULE.</source>
 </PROG>
 <CLAS CLSNAME="ZCL_MAT_HEIRARCHY" VERSION="1" LANGU="E" DESCRIPT="material heirarchy" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <types CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="TYP_S_T179" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="9 " SRCCOLUMN1="4 " SRCROW2="16 " SRCCOLUMN2="24 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF typ_s_t179,
        prodh  TYPE  prodh_d,
        stufe  TYPE  prodh_stuf,
        txt    TYPE bezei40,
        key    TYPE tv_nodekey,
        par    TYPE tv_nodekey,
        parent TYPE tv_nodekey,
      END OF   typ_s_t179
"/>
  <types CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="TYP_T_T179" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="18 " SRCCOLUMN1="4 " SRCROW2="18 " SRCCOLUMN2="47 " TYPESRC_LENG="0 " TYPESRC="typ_t_t179 TYPE STANDARD TABLE OF typ_s_t179
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="001" ENTRY="Display Linked Materials" LENGTH="48 "/>
   </language>
  </textPool>
  <typeClasDef CLSNAME="ZCL_MAT_HEIRARCHY" TYPEGROUP="ZCL_ZMAT_HEIR_MPC" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GC_BACK" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;BACK&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SY-UCOMM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GC_DEFAULT_MAT_IMG" VERSION="1" LANGU="E" DESCRIPT="Default Material Image" EXPOSURE="0" STATE="1" EDITORDER="14 " ATTDECLTYP="2" ATTVALUE="&apos;DEFAULT&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="MATNR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GC_MAT_DISP" VERSION="1" LANGU="E" DESCRIPT="Linked Material" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;GC_LINK_MATS&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="UI_FUNC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GC_MAT_IMG_PATH" VERSION="1" LANGU="E" DESCRIPT="Material Image MIME Path" EXPOSURE="0" STATE="1" EDITORDER="12 " ATTDECLTYP="0" ATTVALUE="&apos;/SAP/PUBLIC/MAT_IMG/&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TEXT50" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GC_TEST" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;TEST&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SY-UCOMM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GO_ALV" VERSION="1" LANGU="E" DESCRIPT="ALV List Viewer" EXPOSURE="0" STATE="1" EDITORDER="10 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_GUI_ALV_GRID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GO_DETAILS_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Abstract Container for GUI Controls" EXPOSURE="0" STATE="1" EDITORDER="8 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_GUI_CONTAINER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GO_PICTURE" VERSION="1" LANGU="E" DESCRIPT="HTML Control Proxy Class" EXPOSURE="0" STATE="1" EDITORDER="13 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_GUI_PICTURE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GO_PICTURE_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Abstract Container for GUI Controls" EXPOSURE="0" STATE="1" EDITORDER="9 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_GUI_CONTAINER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GO_SPLITTER_CONTAINER" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_GUI_SPLITTER_CONTAINER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GO_TREE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_GUI_SIMPLE_TREE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GO_TREE_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Abstract Container for GUI Controls" EXPOSURE="0" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_GUI_CONTAINER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GT_HIRARCHY_TABLE" VERSION="1" LANGU="E" DESCRIPT="Product Hierarchy Table" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SFS_QB_NODE_T" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GT_MAT_INFO" VERSION="1" LANGU="E" DESCRIPT="Single-Character Flag" EXPOSURE="0" STATE="1" EDITORDER="11 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZCL_ZMAT_HEIR_MPC=&gt;TT_MATSINFO" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GV_DEFAULT_IMG_BASE64" VERSION="1" LANGU="E" DESCRIPT="Default Material Image Base64 Data" EXPOSURE="0" STATE="1" EDITORDER="15 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GV_DEFAULT_IMG_MIME" VERSION="1" LANGU="E" DESCRIPT="Default Material MIME Type" EXPOSURE="0" STATE="1" EDITORDER="16 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GV_EVENT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TEXT30" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GV_INIT_NO" VERSION="1" LANGU="E" DESCRIPT="Numeric, 2-digit value" EXPOSURE="0" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="NUM2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GV_NODE_KEY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TV_NODEKEY" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GV_PAR_KEY" VERSION="1" LANGU="E" DESCRIPT="Tree Control: Node Key" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TV_NODEKEY" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GV_UCOMM" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SY-UCOMM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="BUILD_NODE_TABLE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="BUILD_NODE_TABLE" SCONAME="IV_LEVEL" VERSION="1" LANGU="E" DESCRIPT="Number of the level in the product hierarchy" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="PRODH_STUF" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="BUILD_NODE_TABLE" SCONAME="RT_NODE_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SFS_QB_NODE_T"/>
   <source>METHOD build_node_table.
    DATA: ls_node             TYPE mtreesnode,
          lv_parant_node      TYPE tv_nodekey,
          lv_main_parant_node TYPE tv_nodekey,
          lv_main_len         TYPE int4.

    get_heirarchy_records( EXPORTING iv_level  = iv_level
                           IMPORTING et_heirar = DATA(lt_t179) ).
    IF lt_t179 IS NOT INITIAL.
      LOOP AT lt_t179 INTO DATA(ls_t179) GROUP BY ( stufe = ls_t179-stufe
                                                    index = GROUP INDEX
                                                    size = GROUP SIZE ) ASCENDING INTO DATA(ls_group).
        LOOP AT lt_t179 INTO DATA(ls_t1791) WHERE stufe EQ  ls_group-stufe.
          DATA(lv_new_id) = get_new_parent( ).
          ls_group-index = sy-tabix.
          lv_main_len = strlen( ls_t1791-prodh ).
          IF ls_group-stufe NE 1.
            lv_main_parant_node = ls_t1791-par.
          ENDIF.
          update_id( EXPORTING iv_id       = lv_new_id
                               iv_stuf     = ls_t179-stufe
                               iv_prodh    = ls_t1791-prodh
                               iv_main_len =  lv_main_len
                               iv_from_index = ls_group-index
                               iv_main_parent = lv_main_parant_node
                     CHANGING  ct_t179     = lt_t179 ).
        ENDLOOP.
        CLEAR: gv_par_key.
      ENDLOOP.
      DATA(lt_mara) = get_no_of_material_info( it_t179 = lt_t179 ).
      LOOP AT lt_t179 ASSIGNING FIELD-SYMBOL(&lt;fs_ls_t179&gt;).
        ls_node-node_key = &lt;fs_ls_t179&gt;-key.
        ls_node-isfolder = abap_true.
        ls_node-text = &lt;fs_ls_t179&gt;-txt.
        ls_node-relatkey = &lt;fs_ls_t179&gt;-parent.
        IF is_child( it_t179 = lt_t179 iv_key  = &lt;fs_ls_t179&gt;-key  ) EQ abap_true.
          ls_node-relatship = cl_gui_simple_tree=&gt;relat_last_child.
          ls_node-expander = abap_true.
        ENDIF.
        READ TABLE lt_mara INTO DATA(ls_mara) WITH KEY prdha = &lt;fs_ls_t179&gt;-prodh BINARY SEARCH.
        IF sy-subrc EQ 0.
          ls_node-dragdropid = ls_mara-matnr.
        ENDIF.
        ls_node-exp_image = &lt;fs_ls_t179&gt;-prodh.
        APPEND ls_node TO rt_node_table.
        CLEAR: ls_node.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="DISPLAY_MATERIAL_IMAGE" VERSION="1" LANGU="E" DESCRIPT="Display Material Image" EXPOSURE="0" STATE="1" EDITORDER="15 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="DISPLAY_MATERIAL_IMAGE" SCONAME="IV_MATNR" VERSION="1" LANGU="E" DESCRIPT="Material Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MATNR"/>
   <source>METHOD display_material_image.
    TYPES: lt_line(1022) TYPE x.
    CONSTANTS: lc_loop TYPE i VALUE 1022.
    DATA:lt_tab TYPE STANDARD TABLE OF lt_line,
         lv_url TYPE c LENGTH 255.
    IF go_picture IS BOUND.
      lv_url = gc_mat_img_path &amp;&amp; iv_matnr.
      get_mime_data( EXPORTING iv_matnr   =   iv_matnr
                     IMPORTING ev_content = DATA(lv_content)
                               ev_type    = DATA(lv_type) ).
      DATA(lv_len) = xstrlen( lv_content ).
      WHILE lv_len GE lc_loop.
        APPEND lv_content(lc_loop) TO lt_tab.
        SHIFT lv_content BY lc_loop PLACES LEFT IN BYTE MODE.
        lv_len = xstrlen( lv_content ).
      ENDWHILE.
      IF lv_len GT 0.
        APPEND lv_content TO lt_tab.
      ENDIF.
      CALL FUNCTION &apos;DP_CREATE_URL&apos;
        EXPORTING
          type    = &apos;IMAGE&apos;
          subtype = &apos;JPG&apos;
        TABLES
          data    = lt_tab
        CHANGING
          url     = lv_url.
      go_picture-&gt;load_picture_from_url( url = lv_url ).
      go_picture-&gt;set_display_mode( EXPORTING display_mode = go_picture-&gt;display_mode_fit ).
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_CHILDS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_CHILDS" SCONAME="IV_KEY" VERSION="1" LANGU="E" DESCRIPT="Tree Control: Node Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TV_NODEKEY"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_CHILDS" SCONAME="IV_CHILD_CHECK" VERSION="1" LANGU="E" DESCRIPT="Data element for domain BOOLE: TRUE (=&apos;X&apos;) and FALSE (=&apos; &apos;)" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BOOLE_D" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_CHILDS" SCONAME="RT_CHILDS" VERSION="1" LANGU="E" DESCRIPT="Tree Node Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SFS_QB_NODE_T"/>
   <source>METHOD get_childs.
    DATA: ls_node    TYPE mtreesnode,
          lt_r_prodh TYPE RANGE OF prodh_d,
          lt_t179    TYPE typ_t_t179,
          lv_count   TYPE i.
    APPEND VALUE #( sign = &apos;I&apos; option = &apos;CP&apos; low = iv_key &amp;&amp; &apos;*&apos; ) TO lt_r_prodh.

    SELECT m~prodh, m~stufe, t~vtext AS txt FROM t179 AS m
                                     INNER JOIN t179t AS t
                                     ON m~prodh EQ t~prodh
                                     INTO TABLE @lt_t179
                                     WHERE m~prodh IN @lt_r_prodh
                                     AND t~spras = @sy-langu.
    IF sy-subrc EQ 0.
      SORT lt_t179 BY prodh stufe.
      IF iv_child_check EQ abap_false.
        DELETE lt_t179 INDEX 1.
      ENDIF.
      IF lt_t179 IS NOT INITIAL.
        DATA(ls_t1791) = lt_t179[ 1 ].
        DATA(lt_mara) = get_no_of_material_info( it_t179 = lt_t179 ).
        LOOP AT lt_t179 ASSIGNING FIELD-SYMBOL(&lt;fs_ls_t179&gt;) WHERE stufe EQ ls_t1791-stufe.
          REFRESH: lt_r_prodh.
          ls_node-n_image = &lt;fs_ls_t179&gt;-prodh.
          ls_node-text = &lt;fs_ls_t179&gt;-txt.
          APPEND VALUE #( sign = &apos;I&apos; option = &apos;CP&apos; low = &lt;fs_ls_t179&gt;-prodh &amp;&amp; &apos;*&apos; ) TO lt_r_prodh.
          LOOP AT lt_t179 TRANSPORTING NO FIELDS WHERE prodh IN lt_r_prodh.
            lv_count = lv_count + 1.
            IF lv_count GE 2.
              EXIT.
            ENDIF.
          ENDLOOP.
          IF lv_count GE 2.
            ls_node-isfolder = abap_true.
          ENDIF.
          READ TABLE lt_mara INTO DATA(ls_mara) WITH KEY prdha = &lt;fs_ls_t179&gt;-prodh BINARY SEARCH.
          IF sy-subrc EQ 0.
            ls_node-dragdropid = ls_mara-matnr.
          ENDIF.
          APPEND ls_node TO rt_childs.
          CLEAR: ls_node, lv_count.
        ENDLOOP.
        SORT rt_childs BY text.
      ENDIF.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_FCAT" VERSION="1" LANGU="E" DESCRIPT="Get Field Catalog of Structure" EXPOSURE="0" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_FCAT" SCONAME="IV_TABNAME" VERSION="1" LANGU="E" DESCRIPT="Table Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABNAME"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_FCAT" SCONAME="RT_FCAT" VERSION="1" LANGU="E" DESCRIPT="Field Catalog for List Viewer Control" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="LVC_T_FCAT"/>
   <source>METHOD get_fcat.
    CALL FUNCTION &apos;LVC_FIELDCATALOG_MERGE&apos;
      EXPORTING
        i_structure_name       = iv_tabname
      CHANGING
        ct_fieldcat            = rt_fcat
      EXCEPTIONS
        inconsistent_interface = 1
        program_error          = 2
        OTHERS                 = 3.
    IF sy-subrc EQ 0.
      RETURN.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_HEIRARCHY_RECORDS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_HEIRARCHY_RECORDS" SCONAME="IV_LEVEL" VERSION="1" LANGU="E" DESCRIPT="Number of the level in the product hierarchy" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="PRODH_STUF" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_HEIRARCHY_RECORDS" SCONAME="ET_HEIRAR" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_T_T179"/>
   <source>METHOD get_heirarchy_records.
    DATA: lt_r_stufe TYPE RANGE OF prodh_stuf,
          lt_r_prodh TYPE RANGE OF prodh_d.
    REFRESH: et_heirar.
    IF iv_level IS SUPPLIED AND iv_level IS NOT INITIAL.
      APPEND VALUE #( low = iv_level sign = &apos;I&apos; option = &apos;EQ&apos; ) TO lt_r_stufe.
    ENDIF.
    SELECT m~prodh, m~stufe, t~vtext, m~prodh AS key FROM t179 AS m
                                                     INNER JOIN t179t AS t
                                                     ON m~prodh EQ t~prodh
                                                     INTO TABLE @et_heirar
                                                     WHERE m~prodh IN @lt_r_prodh
                                                     AND   m~stufe IN @lt_r_stufe
                                                     AND t~spras = @sy-langu.
    IF sy-subrc EQ 0.
      SORT et_heirar BY prodh stufe.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_MATERIALS_IMAGES" VERSION="1" LANGU="E" DESCRIPT="Get Materials Images" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_MATERIALS_IMAGES" SCONAME="IV_PRDHA" VERSION="1" LANGU="E" DESCRIPT="Product Hierarchy" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="PRODH_D" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_MATERIALS_IMAGES" SCONAME="IV_MATNR" VERSION="1" LANGU="E" DESCRIPT="Material Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MATNR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_MATERIALS_IMAGES" SCONAME="ET_IMAGE_DATA" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZCL_ZMAT_HEIR_MPC=&gt;TT_MATIMG"/>
   <source>METHOD get_materials_images.
    DATA: lv_length TYPE i,
          lv_base64 TYPE string.
    REFRESH: et_image_data.
    IF iv_prdha IS SUPPLIED.
      SELECT matnr FROM mara
                   INTO TABLE @DATA(lt_mat_info)
                   WHERE prdha EQ @iv_prdha.
    ELSEIF iv_matnr IS SUPPLIED.
      APPEND VALUE #( matnr = iv_matnr ) TO lt_mat_info.
    ENDIF.
    IF sy-subrc EQ 0 AND lt_mat_info IS NOT INITIAL.
      LOOP AT lt_mat_info INTO DATA(ls_mat_info).
        IF is_mime_exist( iv_matnr = ls_mat_info-matnr ) EQ abap_true.
          get_mime_data( EXPORTING iv_matnr   = ls_mat_info-matnr
                         IMPORTING ev_content = DATA(lv_content)
                                   ev_type    = DATA(lv_type) ).
          CALL FUNCTION &apos;SCMS_BASE64_ENCODE_STR&apos;
            EXPORTING
              input  = lv_content
            IMPORTING
              output = lv_base64.
        ELSE.
          IF gv_default_img_base64 IS INITIAL.
            get_mime_data( EXPORTING iv_matnr   = gc_default_mat_img
                           IMPORTING ev_content = lv_content
                                     ev_type    = gv_default_img_mime ).
            CALL FUNCTION &apos;SCMS_BASE64_ENCODE_STR&apos;
              EXPORTING
                input  = lv_content
              IMPORTING
                output = gv_default_img_base64.
          ENDIF.
          lv_base64 = gv_default_img_base64.
          lv_type = gv_default_img_mime.
        ENDIF.
        APPEND VALUE #( name = ls_mat_info-matnr descript = lv_type suffix = lv_base64 ) TO et_image_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_MATERIALS_INFO" VERSION="1" LANGU="E" DESCRIPT="Get Materials Information based on Product ID" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_MATERIALS_INFO" SCONAME="IV_PRDHA" VERSION="1" LANGU="E" DESCRIPT="Product Hierarchy" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="PRODH_D"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_MATERIALS_INFO" SCONAME="ET_MATERIALS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZCL_ZMAT_HEIR_MPC=&gt;TT_MATSINFO"/>
   <source>METHOD get_materials_info.
    REFRESH: et_materials.
    SELECT m~matnr, t~maktx FROM mara AS m
                        INNER JOIN makt AS t
                        ON m~matnr EQ t~matnr
                        INTO TABLE @DATA(lt_mat_info)
                        WHERE m~prdha EQ @iv_prdha
                        AND   t~spras EQ @sy-langu.
    IF sy-subrc EQ 0.
      LOOP AT lt_mat_info INTO DATA(ls_mat_info).
        APPEND VALUE #( matnr = ls_mat_info-matnr  maktx = ls_mat_info-maktx prdha = iv_prdha ) TO et_materials.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_MATINFO_FOR_BUILD" VERSION="1" LANGU="E" DESCRIPT="Get Materials Information based on Product ID for SAP Build" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_MATINFO_FOR_BUILD" SCONAME="IV_PRDHA" VERSION="1" LANGU="E" DESCRIPT="Product Hierarchy" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="PRODH_D"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_MATINFO_FOR_BUILD" SCONAME="ET_MATERIALS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ZCL_ZMAT_HEIR_MPC=&gt;TT_MATBUILD"/>
   <source>METHOD get_matinfo_for_build.
    REFRESH: et_materials.
    SELECT m~matnr, t~maktx FROM mara AS m
                        INNER JOIN makt AS t
                        ON m~matnr EQ t~matnr
                        INTO TABLE @DATA(lt_mat_info)
                        WHERE m~prdha EQ @iv_prdha
                        AND   t~spras EQ @sy-langu.
    IF sy-subrc EQ 0.
      LOOP AT lt_mat_info INTO DATA(ls_mat_info).
        get_materials_images( EXPORTING iv_matnr  = ls_mat_info-matnr
                              IMPORTING et_image_data = DATA(lt_mat_image) ).
        IF lt_mat_image IS NOT INITIAL.
          DATA(ls_mat_img) = lt_mat_image[ 1 ].
        ENDIF.
        APPEND VALUE #( product_id = ls_mat_info-matnr  content_url = ls_mat_info-maktx mime_type = ls_mat_img-descript content_base64 = ls_mat_img-suffix ) TO et_materials.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_MIME_DATA" VERSION="1" LANGU="E" DESCRIPT="Get Material Image Data" EXPOSURE="0" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_MIME_DATA" SCONAME="IV_MATNR" VERSION="1" LANGU="E" DESCRIPT="Material Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MATNR"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_MIME_DATA" SCONAME="EV_CONTENT" VERSION="1" LANGU="E" DESCRIPT="Image Data" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="XSTRING"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_MIME_DATA" SCONAME="EV_TYPE" VERSION="1" LANGU="E" DESCRIPT="Image Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="QISRDIMAGE_SUFFIX"/>
   <source>METHOD get_mime_data.
    CLEAR: ev_content, ev_type.
    DATA(lv_url) = gc_mat_img_path &amp;&amp; iv_matnr.
    cl_mime_repository_api=&gt;get_api( )-&gt;get( EXPORTING i_url = CONV #( lv_url )
                                             IMPORTING e_content = ev_content
                                                       e_mime_type = ev_type
                                             EXCEPTIONS parameter_missing  = 1
                                                        error_occured = 2
                                                        not_found = 3
                                                        permission_failure = 4 ).
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_NEW_PARENT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_NEW_PARENT" SCONAME="RV_ID" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TV_NODEKEY"/>
   <source>METHOD get_new_parent.
    DATA lv_int TYPE int4.
    lv_int = gv_par_key.
    DATA(lv_mod) = lv_int MOD 26.
    TRY.
        DATA(lv_count) = lv_int / 26.
        IF lv_count LT 0.
          rv_id = sy-abcde+25(1).
        ENDIF.
      CATCH cx_sy_zerodivide.
        lv_count = gv_par_key - 25.
    ENDTRY.
    IF lv_count EQ 0.
      rv_id = sy-abcde+lv_mod(1).
    ELSE.
      rv_id = sy-abcde+lv_mod(1) &amp;&amp; lv_count.
    ENDIF.
    gv_par_key = gv_par_key + 1.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_NO_OF_MATERIAL_INFO" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_NO_OF_MATERIAL_INFO" SCONAME="IT_T179" VERSION="1" LANGU="E" DESCRIPT="Tree Node Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_T_T179"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_NO_OF_MATERIAL_INFO" SCONAME="RT_MARA" VERSION="1" LANGU="E" DESCRIPT="Table Type for General Material Data" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="MARA_TT"/>
   <source>METHOD GET_NO_OF_MATERIAL_INFO.
    IF it_t179 IS NOT INITIAL.
      SELECT matnr, prdha FROM mara
                          INTO TABLE @DATA(lt_mara)
                          FOR ALL ENTRIES IN @it_t179
                          WHERE prdha EQ @it_t179-prodh.
      IF sy-subrc EQ 0.
        SORT lt_mara BY prdha.
        LOOP AT lt_mara INTO DATA(ls_mara) GROUP BY ( prdha = ls_mara-prdha
                                                      index = GROUP INDEX
                                                      size = GROUP SIZE ) ASCENDING INTO DATA(ls_group).
          APPEND VALUE #( matnr = ls_group-size prdha = ls_group-prdha ) TO rt_mara.
        ENDLOOP.
        SORT rt_mara BY prdha.
      ENDIF.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_PARENT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_PARENT" SCONAME="IV_KEY" VERSION="1" LANGU="E" DESCRIPT="Tree Control: Node Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TV_NODEKEY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="GET_PARENT" SCONAME="RT_PARENTS" VERSION="1" LANGU="E" DESCRIPT="Tree Node Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SFS_QB_NODE_T"/>
   <source>METHOD get_parent.
    DATA: ls_node    TYPE mtreesnode,
          lt_r_prodh TYPE RANGE OF prodh_d,
          lt_t179    TYPE typ_t_t179.
    IF iv_key IS SUPPLIED AND iv_key IS NOT INITIAL.
      APPEND VALUE #( sign = &apos;I&apos; option = &apos;CP&apos; low = iv_key &amp;&amp; &apos;*&apos; ) TO lt_r_prodh.
    ENDIF.
    SELECT m~prodh, m~stufe, t~vtext AS txt FROM t179 AS m
                                     INNER JOIN t179t AS t
                                     ON m~prodh EQ t~prodh
                                     INTO TABLE @lt_t179
                                     WHERE m~prodh IN @lt_r_prodh
                                     AND t~spras = @sy-langu.
    IF sy-subrc EQ 0.
      SORT lt_t179 BY prodh stufe.
      DATA(lt_mara) = get_no_of_material_info( it_t179 = lt_t179 ).
      LOOP AT lt_t179 ASSIGNING FIELD-SYMBOL(&lt;fs_ls_t179&gt;) WHERE stufe EQ 1.
        REFRESH: lt_r_prodh.
        ls_node-n_image = &lt;fs_ls_t179&gt;-prodh.
        ls_node-text = &lt;fs_ls_t179&gt;-txt.
        APPEND VALUE #( sign = &apos;I&apos; option = &apos;CP&apos; low = &lt;fs_ls_t179&gt;-prodh &amp;&amp; &apos;*&apos; ) TO lt_r_prodh.
        LOOP AT lt_t179 TRANSPORTING NO FIELDS WHERE prodh IN lt_r_prodh.
          ls_node-relatship = ls_node-relatship + 1.
        ENDLOOP.
        IF ls_node-relatship GE 2.
          ls_node-isfolder = abap_true.
        ENDIF.
        READ TABLE lt_mara INTO DATA(ls_mara) WITH KEY prdha = &lt;fs_ls_t179&gt;-prodh BINARY SEARCH.
        IF sy-subrc EQ 0.
          ls_node-dragdropid = ls_mara-matnr.
        ENDIF.
        APPEND ls_node TO rt_parents.
        CLEAR: ls_node.
      ENDLOOP.
      SORT rt_parents BY text.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="HANDLE_ALV_FIELD_DOUBLE_CLICK" VERSION="1" LANGU="E" DESCRIPT="ALV Field Double Click Event" EXPOSURE="0" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="CL_GUI_ALV_GRID" REFCMPNAME="DOUBLE_CLICK" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="HANDLE_ALV_FIELD_DOUBLE_CLICK" SCONAME="E_ROW" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="HANDLE_ALV_FIELD_DOUBLE_CLICK" SCONAME="E_COLUMN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="1" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="HANDLE_ALV_FIELD_DOUBLE_CLICK" SCONAME="ES_ROW_NO" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="1" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <source>METHOD handle_alv_field_double_click.
    READ TABLE gt_mat_info INTO DATA(ls_mat_info) INDEX es_row_no-row_id.
    IF sy-subrc EQ 0.
      IF is_mime_exist( iv_matnr = |{ ls_mat_info-matnr ALPHA = OUT }| ) EQ abap_true.
        display_material_image( iv_matnr = |{ ls_mat_info-matnr ALPHA = OUT }|  ).
      else.
        display_material_image( iv_matnr = |{ gc_default_mat_img ALPHA = OUT }|  ).
*        go_picture-&gt;clear_picture( ).
      ENDIF.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="HANDLE_EXPAND_NO_CHILDREN" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="CL_GUI_SIMPLE_TREE" REFCMPNAME="EXPAND_NO_CHILDREN" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="HANDLE_EXPAND_NO_CHILDREN" SCONAME="NODE_KEY" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <source>METHOD handle_expand_no_children.
    DATA: lt_node_table TYPE STANDARD TABLE OF mtreesnode.
    gv_event = &apos;EXPAND_NO_CHILDREN&apos;.
    gv_node_key = node_key.
    IF node_key = &apos;Child1&apos;.                                 &quot;#EC NOTEXT
      APPEND VALUE: #( node_key = &apos;New1&apos; relatkey = &apos;Child1&apos; relatship = cl_gui_simple_tree=&gt;relat_last_child isfolder = space text = &apos;New1&apos; ) TO lt_node_table,
      #( node_key = &apos;New2&apos; relatkey = &apos;Child1&apos; relatship = cl_gui_simple_tree=&gt;relat_last_child n_image = &apos;@10@&apos; expander = space text = &apos;New2&apos; ) TO lt_node_table.
      CALL METHOD go_tree-&gt;add_nodes
        EXPORTING
          table_structure_name           = &apos;MTREESNODE&apos;
          node_table                     = lt_node_table
        EXCEPTIONS
          failed                         = 1
          error_in_node_table            = 2
          dp_error                       = 3
          table_structure_name_not_found = 4
          OTHERS                         = 5.
      IF sy-subrc EQ 0.
        RETURN.
      ENDIF.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="HANDLE_ITEM_CTMENU_REQUEST" VERSION="1" LANGU="E" DESCRIPT="Context Menu for Item" EXPOSURE="0" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="CL_GUI_ALV_TREE" REFCMPNAME="ITEM_CONTEXT_MENU_REQUEST" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="HANDLE_ITEM_CTMENU_REQUEST" SCONAME="FIELDNAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="HANDLE_ITEM_CTMENU_REQUEST" SCONAME="MENU" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="1" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="HANDLE_ITEM_CTMENU_REQUEST" SCONAME="NODE_KEY" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="1" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <source>METHOD handle_item_ctmenu_request.
    menu-&gt;add_function( EXPORTING fcode = gc_mat_disp    &quot; Function Code
                                  text  = CONV #( TEXT-001 )      &quot; Function text
                                  icon  = &apos;@A6@&apos; ).
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="HANDLE_NODE_DOUBLE_CLICK" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="CL_GUI_SIMPLE_TREE" REFCMPNAME="NODE_DOUBLE_CLICK" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="HANDLE_NODE_DOUBLE_CLICK" SCONAME="NODE_KEY" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <source>METHOD handle_node_double_click.
    READ TABLE gt_hirarchy_table INTO DATA(ls_hiearchy_table) WITH KEY node_key = node_key BINARY SEARCH.
    IF sy-subrc EQ 0.
      get_materials_info( EXPORTING iv_prdha    = CONV #( ls_hiearchy_table-exp_image )    &quot; Product Hierarchy
                          IMPORTING et_materials = gt_mat_info ).
      IF go_alv IS BOUND.
        go_alv-&gt;refresh_table_display( ).
        cl_gui_cfw=&gt;set_new_ok_code( &apos;OK&apos; ).
      ENDIF.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="INIT_ALV" VERSION="1" LANGU="E" DESCRIPT="Initiaze ALV Object" EXPOSURE="0" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD init_alv.
    IF go_alv IS NOT BOUND.
      CREATE OBJECT go_alv
        EXPORTING
          i_parent          = go_details_container    &quot; Parent Container
        EXCEPTIONS
          error_cntl_create = 1
          error_cntl_init   = 2
          error_cntl_link   = 3
          error_dp_create   = 4
          OTHERS            = 5.
      IF sy-subrc EQ 0.
        DATA(lt_fcat) = get_fcat( iv_tabname = &apos;TXW_MAT&apos; ).
        LOOP AT lt_fcat ASSIGNING FIELD-SYMBOL(&lt;fs_ls_fcat&gt;).
          IF &lt;fs_ls_fcat&gt;-fieldname EQ &apos;MAKTX&apos; OR &lt;fs_ls_fcat&gt;-fieldname EQ &apos;MATNR&apos;.
            CONTINUE.
          ELSE.
            &lt;fs_ls_fcat&gt;-no_out = abap_true.
          ENDIF.
        ENDLOOP.
        SET HANDLER : handle_alv_field_double_click FOR go_alv.
        CALL METHOD go_alv-&gt;set_table_for_first_display
          CHANGING
            it_outtab                     = gt_mat_info
            it_fieldcatalog               = lt_fcat
          EXCEPTIONS
            invalid_parameter_combination = 1
            program_error                 = 2
            too_many_lines                = 3
            OTHERS                        = 4.
        IF sy-subrc EQ 0.
        ENDIF.
      ENDIF.
    ENDIF.
    go_alv-&gt;refresh_table_display( ).
    IF sy-subrc &lt;&gt; 0.
      RETURN.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="INIT_PICTURE" VERSION="1" LANGU="E" DESCRIPT="Initialize HTML Object" EXPOSURE="0" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD init_picture.
    IF go_picture_container IS BOUND.
      CREATE OBJECT go_picture
        EXPORTING
          parent = go_picture_container   &quot; Parent Container
        EXCEPTIONS
          error  = 1
          OTHERS = 2.
      IF sy-subrc EQ 0.
        RETURN.
      ENDIF.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="INIT_TREE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD init_tree.
    DATA: lt_events     TYPE cntl_simple_events.
    IF go_tree IS NOT BOUND.
      init_view( ).
      CREATE OBJECT go_tree
        EXPORTING
          parent                      = go_tree_container
          node_selection_mode         = cl_gui_simple_tree=&gt;node_sel_mode_single
        EXCEPTIONS
          lifetime_error              = 1
          cntl_system_error           = 2
          create_error                = 3
          failed                      = 4
          illegal_node_selection_mode = 5.
      IF sy-subrc EQ 0.
        APPEND VALUE: #( eventid = cl_gui_simple_tree=&gt;eventid_node_double_click appl_event = abap_true ) TO lt_events,
                      #( eventid = cl_gui_simple_tree=&gt;eventid_expand_no_children appl_event = abap_true ) TO lt_events.
*                      #( eventid = cl_gui_column_tree=&gt;eventid_item_context_menu_req appl_event = abap_true ) TO lt_events.
        CALL METHOD go_tree-&gt;set_registered_events
          EXPORTING
            events                    = lt_events
          EXCEPTIONS
            cntl_error                = 1
            cntl_system_error         = 2
            illegal_event_combination = 3.
        IF sy-subrc EQ 0.
          SET HANDLER : handle_node_double_click FOR go_tree,
                        handle_expand_no_children FOR go_tree.
*                        handle_item_ctmenu_request FOR go_tree.
          gt_hirarchy_table = build_node_table( ).
          CALL METHOD go_tree-&gt;add_nodes
            EXPORTING
              table_structure_name           = &apos;MTREESNODE&apos;
              node_table                     = gt_hirarchy_table
            EXCEPTIONS
              failed                         = 1
              error_in_node_table            = 2
              dp_error                       = 3
              table_structure_name_not_found = 4
              OTHERS                         = 5.
          IF sy-subrc EQ 0.
            SORT gt_hirarchy_table BY node_key.
            init_alv( ).
            init_picture( ).
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="INIT_VIEW" VERSION="1" LANGU="E" DESCRIPT="Initial view" EXPOSURE="0" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD init_view.
    IF go_splitter_container IS NOT BOUND.
      CREATE OBJECT go_splitter_container
        EXPORTING
          parent            = cl_gui_custom_container=&gt;default_screen    &quot; Parent Container
          rows              = 1    &quot; Number of Rows to be displayed
          columns           = 3    &quot; Number of Columns to be Displayed
        EXCEPTIONS
          cntl_error        = 1
          cntl_system_error = 2
          OTHERS            = 3.
      IF sy-subrc EQ 0.
        go_tree_container    =  go_splitter_container-&gt;get_container( row = 1 column = 1 ).
        go_details_container =  go_splitter_container-&gt;get_container( row = 1 column = 2 ).
        go_picture_container =  go_splitter_container-&gt;get_container( row = 1 column = 3 ).
      ENDIF.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="IS_CHILD" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="IS_CHILD" SCONAME="IT_T179" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_T_T179"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="IS_CHILD" SCONAME="IV_KEY" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TV_NODEKEY"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="IS_CHILD" SCONAME="RV_EXIST" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="BOOLE_D"/>
   <source>METHOD is_child.
    DATA lv_loop TYPE i.
    rv_exist = abap_false.
    TRY.
        DATA(ls_info) = it_t179[ parent = iv_key ].
        IF ls_info IS NOT INITIAL.
          rv_exist = abap_true.
          RETURN.
        ENDIF.
      CATCH cx_sy_itab_line_not_found.
        RETURN.
    ENDTRY.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="IS_MIME_EXIST" VERSION="1" LANGU="E" DESCRIPT="Check MIME Object Exist" EXPOSURE="0" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="IS_MIME_EXIST" SCONAME="IV_MATNR" VERSION="1" LANGU="E" DESCRIPT="Material Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MATNR"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="IS_MIME_EXIST" SCONAME="RV_EXIST" VERSION="1" LANGU="E" DESCRIPT="Data element for domain BOOLE: TRUE (=&apos;X&apos;) and FALSE (=&apos; &apos;)" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="BOOLE_D"/>
   <source>METHOD is_mime_exist.
    DATA: lo_mime_repository TYPE REF TO if_mr_api.
    DATA(lv_url) = gc_mat_img_path &amp;&amp; iv_matnr.
    lo_mime_repository = cl_mime_repository_api=&gt;get_api( ).
    lo_mime_repository-&gt;get( EXPORTING i_url                  = CONV #( lv_url )    &quot; Object URL
                             EXCEPTIONS parameter_missing      = 1
                                        error_occured          = 2
                                        not_found              = 3
                                        permission_failure     = 4
                                        OTHERS                 = 5 ).
    IF sy-subrc = 0.
      &quot; MIME exists
      rv_exist = abap_true.
    ELSE.
      &quot; MIME does not exist
      rv_exist = abap_false.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="PAI" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD pai.
    DATA: return_code TYPE i.
    cl_gui_cfw=&gt;dispatch( IMPORTING return_code = DATA(lv_return_code) ).
    IF lv_return_code &lt;&gt; cl_gui_cfw=&gt;rc_noevent.
      CLEAR gv_ucomm.
      EXIT.
    ENDIF.
    CASE gv_ucomm.
      WHEN gc_test.
        CALL METHOD go_tree-&gt;expand_node
          EXPORTING
            node_key = &apos;New1&apos;.
      WHEN gc_back.
        LEAVE PROGRAM.
    ENDCASE.
    CLEAR gv_ucomm.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="PBO" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD pbo.
    IF go_tree IS NOT BOUND.
      init_tree( ).
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="UPDATE_ID" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="UPDATE_ID" SCONAME="IV_ID" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TV_NODEKEY"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="UPDATE_ID" SCONAME="IV_STUF" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="PRODH_STUF"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="UPDATE_ID" SCONAME="IV_PRODH" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="PRODH_D"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="UPDATE_ID" SCONAME="IV_MAIN_LEN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="INT4"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="UPDATE_ID" SCONAME="IV_FROM_INDEX" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="INT4"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="UPDATE_ID" SCONAME="IV_MAIN_PARENT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TV_NODEKEY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_MAT_HEIRARCHY" CMPNAME="UPDATE_ID" SCONAME="CT_T179" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_T_T179"/>
   <source>METHOD update_id.
    LOOP AT ct_t179 ASSIGNING FIELD-SYMBOL(&lt;fs_ls_t179&gt;) FROM iv_from_index.
      IF &lt;fs_ls_t179&gt;-prodh+0(iv_main_len) NE iv_prodh.
        RETURN.
      ENDIF.
      DATA(lv_len) = strlen( &lt;fs_ls_t179&gt;-prodh ) - iv_main_len.
      IF lv_len EQ 0.
        &lt;fs_ls_t179&gt;-key = iv_main_parent &amp;&amp; iv_id.
      ELSE.
        &lt;fs_ls_t179&gt;-key = iv_main_parent &amp;&amp; iv_id &amp;&amp; &lt;fs_ls_t179&gt;-prodh+iv_main_len(lv_len).
      ENDIF.
      &lt;fs_ls_t179&gt;-par = iv_main_parent &amp;&amp; iv_id.
      IF iv_main_parent IS NOT INITIAL.
        &lt;fs_ls_t179&gt;-parent = iv_main_parent.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_ZMAT_HEIR_DPC_EXT" VERSION="1" LANGU="E" DESCRIPT="Data Provider Secondary Class" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CHGDANYBY="SAPUSER" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZCL_ZMAT_HEIR_DPC">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZCL_ZMAT_HEIR_DPC_EXT" REFCLSNAME="ZCL_ZMAT_HEIR_DPC" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_ZMAT_HEIR_DPC_EXT" REFCLSNAME="ZCL_ZMAT_HEIR_DPC" VERSION="1" MTDNAME="HEIRARCHYSET_GET_ENTITY" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCL_ZMAT_HEIR_DPC_EXT" REFCLSNAME="ZCL_ZMAT_HEIR_DPC" VERSION="1" MTDNAME="HEIRARCHYSET_GET_ENTITYSET" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCL_ZMAT_HEIR_DPC_EXT" REFCLSNAME="ZCL_ZMAT_HEIR_DPC" VERSION="1" MTDNAME="MATBUILDSET_GET_ENTITYSET" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCL_ZMAT_HEIR_DPC_EXT" REFCLSNAME="ZCL_ZMAT_HEIR_DPC" VERSION="1" MTDNAME="MATIMGSET_GET_ENTITY" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCL_ZMAT_HEIR_DPC_EXT" REFCLSNAME="ZCL_ZMAT_HEIR_DPC" VERSION="1" MTDNAME="MATIMGSET_GET_ENTITYSET" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCL_ZMAT_HEIR_DPC_EXT" REFCLSNAME="ZCL_ZMAT_HEIR_DPC" VERSION="1" MTDNAME="MATSINFOSET_GET_ENTITYSET" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZCL_ZMAT_HEIR_DPC" CMPNAME="HEIRARCHYSET_GET_ENTITY" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD heirarchyset_get_entity.
    IF it_key_tab IS NOT INITIAL.
      DATA(lo_heirar) = NEW zcl_mat_heirarchy( ).
      IF lo_heirar IS BOUND.
        DATA(lt_entityset) = lo_heirar-&gt;get_parent( CONV #( it_key_tab[ 1 ]-value ) ).
        IF lt_entityset IS NOT INITIAL.
          er_entity = lt_entityset[ 1 ].
        ELSE.
          lt_entityset = lo_heirar-&gt;get_childs( iv_key = CONV #( it_key_tab[ 1 ]-value )
                                                iv_child_check = abap_true ).
          IF lt_entityset IS NOT INITIAL.
            er_entity = lt_entityset[ 1 ].
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_ZMAT_HEIR_DPC" CMPNAME="HEIRARCHYSET_GET_ENTITYSET" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD heirarchyset_get_entityset.
    DATA(lo_heirar) = NEW zcl_mat_heirarchy( ).
    IF lo_heirar IS BOUND.
      DATA(lt_filter_so) = io_tech_request_context-&gt;get_filter( )-&gt;get_filter_select_options( ).
      IF lt_filter_so IS NOT INITIAL.
*----------------------------------------------------------------------*
*&amp;  Reading value from IO_TECH_REQUEST_CONTEXT based on importing
*&amp;  Field name
*----------------------------------------------------------------------*
        READ TABLE lt_filter_so INTO DATA(ls_filter_so) WITH KEY property = &apos;N_IMAGE&apos;.
        IF sy-subrc EQ 0 AND ls_filter_so-select_options IS NOT INITIAL.
          IF ls_filter_so-select_options[ 1 ]-low EQ &apos;PRV&apos;.
            et_entityset = lo_heirar-&gt;build_node_table( ).
          ELSE.
            et_entityset = lo_heirar-&gt;get_childs( iv_key = CONV #( ls_filter_so-select_options[ 1 ]-low ) ).
          ENDIF.
          RETURN.
        ENDIF.
      ENDIF.
      et_entityset = lo_heirar-&gt;get_parent( ).
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_ZMAT_HEIR_DPC" CMPNAME="MATBUILDSET_GET_ENTITYSET" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD matbuildset_get_entityset.
    DATA(lo_heirar) = NEW zcl_mat_heirarchy( ).
    IF lo_heirar IS BOUND.
      DATA(lt_filter_so) = io_tech_request_context-&gt;get_filter( )-&gt;get_filter_select_options( ).
      IF lt_filter_so IS NOT INITIAL.
*----------------------------------------------------------------------*
*&amp;  Reading value from IO_TECH_REQUEST_CONTEXT based on importing
*&amp;  Field name
*----------------------------------------------------------------------*
        READ TABLE lt_filter_so INTO DATA(ls_filter_so) WITH KEY property = &apos;PRODUCT_ID&apos;.
        IF sy-subrc EQ 0 AND ls_filter_so-select_options IS NOT INITIAL.
          lo_heirar-&gt;get_matinfo_for_build( EXPORTING iv_prdha     = CONV #( ls_filter_so-select_options[ 1 ]-low )    &quot; Product Hierarchy
                                         IMPORTING et_materials = et_entityset ).
          RETURN.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_ZMAT_HEIR_DPC" CMPNAME="MATIMGSET_GET_ENTITY" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD matimgset_get_entity.
    IF it_key_tab IS NOT INITIAL.
      DATA(lo_heirar) = NEW zcl_mat_heirarchy( ).
      IF lo_heirar IS BOUND.
        lo_heirar-&gt;get_materials_images( EXPORTING iv_matnr     = CONV #( it_key_tab[ 1 ]-value )    &quot; Product Hierarchy
                                         IMPORTING et_image_data = DATA(lt_entityset) ).
        er_entity = lt_entityset[ 1 ].
      ENDIF.
    ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_ZMAT_HEIR_DPC" CMPNAME="MATIMGSET_GET_ENTITYSET" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD matimgset_get_entityset.
    DATA(lo_heirar) = NEW zcl_mat_heirarchy( ).
    IF lo_heirar IS BOUND.
      DATA(lt_filter_so) = io_tech_request_context-&gt;get_filter( )-&gt;get_filter_select_options( ).
      IF lt_filter_so IS NOT INITIAL.
*----------------------------------------------------------------------*
*&amp;  Reading value from IO_TECH_REQUEST_CONTEXT based on importing
*&amp;  Field name
*----------------------------------------------------------------------*
        READ TABLE lt_filter_so INTO DATA(ls_filter_so) WITH KEY property = &apos;NAME&apos;.
        IF sy-subrc EQ 0 AND ls_filter_so-select_options IS NOT INITIAL.
          lo_heirar-&gt;get_materials_images( EXPORTING iv_prdha     = CONV #( ls_filter_so-select_options[ 1 ]-low )    &quot; Product Hierarchy
                                           IMPORTING et_image_data = et_entityset ).
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_ZMAT_HEIR_DPC" CMPNAME="MATSINFOSET_GET_ENTITYSET" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD matsinfoset_get_entityset.
    DATA(lo_heirar) = NEW zcl_mat_heirarchy( ).
    IF lo_heirar IS BOUND.
      DATA(lt_filter_so) = io_tech_request_context-&gt;get_filter( )-&gt;get_filter_select_options( ).
      IF lt_filter_so IS NOT INITIAL.
*----------------------------------------------------------------------*
*&amp;  Reading value from IO_TECH_REQUEST_CONTEXT based on importing
*&amp;  Field name
*----------------------------------------------------------------------*
        READ TABLE lt_filter_so INTO DATA(ls_filter_so) WITH KEY property = &apos;PRDHA&apos;.
        IF sy-subrc EQ 0 AND ls_filter_so-select_options IS NOT INITIAL.
          lo_heirar-&gt;get_materials_info( EXPORTING iv_prdha     = CONV #( ls_filter_so-select_options[ 1 ]-low )    &quot; Product Hierarchy
                                         IMPORTING et_materials = et_entityset ).
          RETURN.
        ENDIF.
      ENDIF.
      et_entityset = lo_heirar-&gt;get_parent( ).
    ENDIF.
  ENDMETHOD.</source>
  </method>
 </CLAS>
</nugget>
